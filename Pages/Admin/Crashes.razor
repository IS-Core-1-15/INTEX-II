@page "/admin/crashes/{pageNum:int}"
@page "/admin"
@inherits OwningComponentBase<ICrashRepository>
<!--table of crashes-->
<table class="table table-sm table-striped table-bordered table-hover">

    <thead>
        <tr>
            <th>Crash ID</th>
            <th>Date</th>
            <th>County</th>
            <th>City</th>
        </tr>
    </thead>

    <!--lists out each book and data about book along with buttons for details, edit, and delete-->
    <tbody>
        @if (CrashData?.Count() > 0)
        {
            @foreach (Crash c in CrashData.Skip(pageSize * (pageNum - 1)).Take(pageSize))
            {
                <tr>
                    <td>@c.CRASH_ID</td>
                    <td>@c.CRASH_DATETIME</td>
                    <td>@c.COUNTY_NAME</td>
                    <td>@c.CITY</td>
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.CRASH_ID)">Details</NavLink>
                    </td>
                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(c.CRASH_ID)">Edit</NavLink>
                    </td>
                    <td>
                        <NavLink class="btn btn-danger btn-sm" href="@GetDeleteUrl(c.CRASH_ID)">Delete</NavLink>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code{
    [Parameter]
    public int pageNum { get; set; }

    int pageSize = 25;

    public ICrashRepository repo => Service;

    public IEnumerable<Crash> CrashData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        CrashData = await repo.Crashes.ToListAsync();
    }

    //create urls for details and editing depending on book
    public string GetDetailsUrl(long id) => $"/admin/crashes/details/{id}";
    public string GetEditUrl(long id) => $"/admin/crashes/edit/{id}";
    public string GetDeleteUrl(long id) => $"/admin/crashes/confirmDelete/{id}";

    //method for removing a book from the database
    public async Task RemoveCrash(Crash c)
    {
        repo.DeleteCrash(c);
        await UpdateData();
    }
}